# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`)
language_heirarchy %>%
mutate(group = str_replace_all(group, "-", "")) %>%
filter(str_detect(group, "[^[:alnum:]]")) %>%
as.data.frame
cleanupWord <- function(word){
# Replace dashes with undescores
result <- str_replace_all(word, "\\-", "") %>%
str_replace_all("\\'", "") %>%
str_replace_all(" ", "")
str_replace_all("[^[:alnum:]]", "")
return (result)
}
language_heirarchy <- language_heirarchy_api_clean %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`)
cleanupWord <- function(word){
# Replace dashes with undescores
result <- str_replace_all(word, "\\-", "") %>%
str_replace_all("\\'", "") %>%
str_replace_all(" ", "") %>%
str_replace_all("[^[:alnum:]]", "")
return (result)
}
language_heirarchy <- language_heirarchy_api_clean %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`)
language_heirarchy %>%
mutate(group = str_replace_all(group, "-", "")) %>%
filter(str_detect(group, "[^[:alnum:]]")) %>%
as.data.frame
language_heirarchy <- language_heirarchy_api_clean %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
language_heirarchy %>%
mutate(group = str_replace_all(group, "-", "")) %>%
filter(str_detect(group, "[^[:alnum:]]")) %>%
as.data.frame
write.table(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy_api_clean
cleanupWord <- function(word){
# Replace dashes with undescores
result <- str_replace_all(word, "\\-", "") %>%
str_replace_all("\\'", "") %>%
str_replace_all(" ", "") %>%
str_replace_all("[^[:alnum:]]", "")
return (result)
}
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
write.table(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
language_heirarchy
write.table(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
write.table(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
write.csv(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
filter(str_detect(group1, "-"), negate=T))
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
filter(str_detect(group1, "-"), negate=T)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
filter(str_detect(group1, "-", negate=T))
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
filter(str_detect(group1, "-", negate=T)) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
write.csv(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
filter(str_detect(group1, "-"))
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
filter(str_detect(group, "-"))
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
filter(str_detect(group, "-")) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
write.csv(language_heirarchy, "data/output/csv/language_heirarchy.csv", row.names=F, col.names=F)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
filter(str_detect(group, "-")) %>%
group_by(group) %>%
summarize(`1` = n())
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
filter(str_detect(group, "\\-{3,}"))
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
filter(str_detect(group, "-{3,}"))
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
group_by(group) %>%
summarize(`1` = n())
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
group_by(group) %>%
summarize(`1` = n())
language_heirarchy
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
rename(`0` = group) %>% mutate(`1` = 1) %>%
select(`0`, `1`)
language_heirarchy
install.packages("treemap")
library(treemap)
language_heirarchy_api_clean
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
language_heirarchy
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node()
library(treemap)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node()
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node
install.packages(c("treemap", "data.tree")
)
install.packages(c("treemap", "data.tree"))
install.packages(c("treemap", "data.tree"))
library(treemap)
library(data.tree)
library(treemap)
library(data.tree)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node
library(tidyverse)
library(treemap)
library(data.tree)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node
language_heirarchy
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(0,10) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(0,10)
?slice
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(1:10)
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(1:10) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node
?as.Node
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(1:10) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node(pathDelimiter="-")
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(1:5) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node(pathDelimiter="-")
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
slice(1:5) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node(pathName="group", pathDelimiter="-")
language_heirarchy
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T) %>%
# filter(str_detect(group, "-{3,}")) %>%
# rename(`0` = group) %>% mutate(`1` = 1) %>%
# select(`0`, `1`) %>%
as.Node(pathName="group", pathDelimiter="-")
language_heirarchy
language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
language_heirarchy <- language_heirarchy_api_clean %>%
filter(str_detect(group1, "Austronesian")) %>%
mutate_at(vars(group1:group14), list(cleanupWord)) %>%
# Unite groups into a single column
unite("group", group1:group14, sep="-", na.rm=T)
language_heirarchy
language_heirarchy_tree <- language_heirarchy %>%
as.Node(pathName="group", pathDelimiter="-")
language_heirarchy_tree
library(jsonlite)
language_heirarchy_tree %>% as.list %>% toJSON
?toJSON
write_json(language_heirarchy_tree %>% as.list %>% toJSON, "data/output/json/language_heirarchy.json")
?write_json
write_json(language_heirarchy_tree %>% as.list %>% toJSON, "data/output/json/language_heirarchy.json", simplifyVector=F)
language_heirarchy_tree
language_heirarchy_tree %>% as.list
language_heirarchy_tree %>% as.list %>% toJSON
write_json(language_heirarchy_tree %>% as.list %>% toJSON, "data/output/json/language_heirarchy.json", pretty=T, simplifyVector=F)
language_heirarchy
?split
install.packages(c("treemap", "data.tree", "RJSONIO"))
install.packages(c("treemap", "data.tree", "RJSONIO"))
library(RJSONIO)
install.packages(c("treemap", "data.tree", "RJSONIO"))
library(RJSONIO)
install.packages(c("treemap", "data.tree", "RJSONIO"))
install.packages("RJSONIO")
library(RJSONIO)
# Method from https://stackoverflow.com/questions/12818864/how-to-write-to-json-with-children-from-r
# in converting data.frame into json
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){
if(as.character(listSplit[[y]][1,1]) > 0){
list(name=y,children=makeList(listSplit[[y]]))
} else {
list(name=y,size=listSplit[[y]][1,2])
}
})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
language_heirarchy
language_heirarchy_api_clean
language_heirarchy_api_clean
language_heirarchy_api_clean %>%
select(group1:group14)
library(tidyverse)
language_heirarchy_api_clean %>%
select(group1:group14)
language_heirarchy_api_clean
language_heirarchy_api_clean %>%
select(group1:group14, id_lang)
language_heirarchy_api_clean
language_heirarchy_api_clean %>%
select(group1:group14, id_lang)
lang_heir_data <- language_heirarchy_api_clean %>%
select(group1:group14, id_lang)
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){
if(as.character(listSplit[[y]][1,1]) > 0){
list(name=y,children=makeList(listSplit[[y]]))
} else {
list(name=y,size=listSplit[[y]][1,2])
}
})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
lang_heir_data <- language_heirarchy_api_clean %>%
select(group1:group14, id_lang)
jsonOut<-toJSON(list(name="MyData",children=makeList(lang_heir_data[-1])))
jsonOut<-toJSON(list(name="MyData",children=makeList(lang_heir_data[-1])))
jsonOut<-toJSON(list(name="MyData",children=makeList(lang_heir_data[-1])))
language_heirarchy_tree
?FromDataFrameTable
language_heirarchy
load("sampleData")
groupVars
#My sample data is 1000 rows, with the first column a unique id, followed by 100 columns of data variables
groupVars <- c("path")
dataVars <-  colnames(dt)[!colnames(dt) %in% groupVars]
outfile
frameToJSON <- function(dt,groupVars,dataVars,outfile){
#packages we will need:
require(data.table)
require(RJSONIO)
#Here you may want to sort by colSums() to keep only the most relevant variables.
#calculate the correlation matrix
t <- cor(dt[,c(!colnames(dt) %in% groupVars),with=F])
#calculate the hierarchical cluster structure from the correlation scores
hc <- hclust(dist(t), "ward")
#take a look at what your strucutre:
plot(hc)
#now we split the data based on membership structure. We will take four levels:
#(basically this means we will calculate which group each variable belongs in for different levels of the tree strucutre)
memb2 <- as.character(cutree(hc, k = 2))
memb6 <- as.character(cutree(hc, k = 6))
memb15 <- as.character(cutree(hc, k = 15))
memb40 <- as.character(cutree(hc, k = 40))
#Now put this information into a table, together with the labels and the order in which they should appear:
b=data.table(memb2,memb6,memb15,memb40,label=hc$labels,order=hc$order)
#We might want to know the size of each node. Let's add that
b$size <- colSums(dt[,c(dataVars),with=F])
#sort the data so it alligns with the structure calculated using hclust()
setkey(b,order)
#drop the order variable:
b[,order:=NULL]
#we define a function which will create a nested list in JSON format:
#From here: http://stackoverflow.com/questions/12818864/how-to-write-to-json-with-children-from-r
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,imports=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
#This will not work on a data.table
b <- data.frame(b)
out <- makeList(b)
#Have a look at the structure this creates:
print (head(out))
#Basically we have made a list of lists containing the information from the tree diagram.
#Finally we put everythin into a list, convert this to json format and save it as data.json
jsonOut<-toJSON(list(name="Centre",children=makeList(b)))
#We use the cat function here, because in some cases you may want to add separators, or a prefix and suffix to make the formatting just right
cat(jsonOut,file=outfile)
}
frameToJSON(dt,groupVars,dataVars,outfile="data.json")
groupVars <- c("path")
dataVars <-  colnames(dt)[!colnames(dt) %in% groupVars]
frameToJSON(language_heirarchy_api_clean, groupVars, dataVars, outfile="data.json")
dt <- language_heirarchy_api_clean
groupVars <- c("path")
dataVars <-  colnames(dt)[!colnames(dt) %in% groupVars]
frameToJSON(dt, groupVars, dataVars, outfile="data.json")
dataVars
groupVars
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,imports=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,imports=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
jsonOut<-toJSON(list(name="Centre",children=makeList(language_heirarchy_api_clean)))
language_heirarchy_api_clean
jsonOut<-toJSON(list(name="Centre",children=makeList(language_heirarchy_api_clean)))
makeList<-function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,imports=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
jsonOut<-toJSON(list(name="Centre",children=makeList(language_heirarchy_api_clean)))
makeList<- function(x){
if(ncol(x)>2){
listSplit<-split(x[-1],x[1],drop=T)
lapply(names(listSplit),function(y){list(name=y,imports=makeList(listSplit[[y]]))})
}else{
lapply(seq(nrow(x[1])),function(y){list(name=x[,1][y],size=x[,2][y])})
}
}
jsonOut <- toJSON(list(name="Centre",children=makeList(language_heirarchy_api_clean)))
?split
?split
language_heirarchy
language_heirarchy_api_clean
language_heirarchy_api_clean %>% slice(1)
language_heirarchy_api_clean %>% slice(1) %>% list
language_heirarchy_api_clean %>% slice(1) %>% as.vector
language_heirarchy_api_clean %>% pull(1)
language_heirarchy_api_clean %>% slice(1) %>% pull
language_heirarchy_api_clean[1,]
language_heirarchy_api_clean[1,] %>% as.vector
language_heirarchy_api_clean[1,] %>% as.data.frame
language_heirarchy_api_clean[2,] %>% as.data.frame
language_heirarchy_api_clean[3,] %>% as.data.frame
language_heirarchy_api_clean[4,] %>% as.data.frame
language_heirarchy_api_clean[100,] %>% as.data.frame
