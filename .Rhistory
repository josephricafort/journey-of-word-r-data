maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
# Split into different folders
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
filedir
maindir
filename
filename
result
filename
id <- 1
word_compare <- word_list[id]
word_compare
result <- language_words_api_clean %>% filter(word == word_compare)
result
filename <- paste0(word_compare) %>% str_replace_all(", ", "_")
filename
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
maindir
filedir
if(dir.exists(filedir)){
dir.create(filedir)
} else {
write_json(result, paste0(filedir, ".json"))
}
dir.exists(filedir)
dir.create(filedir)
dir()
dir.create()
?dir.create
dir.create(filedir)
paste0(filedir, ".json")
write_json(result, paste0(filedir, ".json"))
id <- 2
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
for(id in 1:length(word_list)){
id <- 2
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
filename <- paste0(word_compare) %>% str_replace_all(", ", "_") %>% str_replace_all("?", "")
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_") %>% str_replace_all("?", "")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_") %>% str_replace_all("\\?", "")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all("\\?", "")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all("\\?", "")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare) %>% str_replace_all(", ", "_") %>% str_replace_all("\\?", "")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", ") %>%
str_replace_all(word, " ", "%")) %>%
as_tibble
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%")) %>%
as_tibble
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%")) %>%
as_tibble
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%")) %>%
as_tibble
language_heirarchy_api_clean <- language_info_api_clean %>%
select(id_lang, language, silcode, classification) %>%
separate(
classification,
"group" %>%
paste(seq(from = 1, to = 14),
sep = ""),
sep = "\\,",
n = 20
) %>%
mutate_if(is.character, str_trim) %>%
mutate_if(is.character, as.factor) %>%
arrange(group1:group14)
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%")) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%"),
word = str_replace_all(word, "\\?", "")) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_words_api_clean
language_heirarchy_api_clean
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, " ", "%"),
word = str_replace_all(word, "\\?", ""),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare)
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_to_lower(word)) %>%
as_tibble
result
id
language_words_api_clean
word_compare
language_words_api_clean %>% filter(word == word_compare & word != "")
language_words_api_clean %>% filter(word == word_compare & word != "") %>%
mutate(word = str_replace_all(word, " ", "%"))
result <- language_words_api_clean %>% filter(word == word_compare & word != "") %>%
mutate(word = str_replace_all(word, " ", "%"))
result
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare & word != "") %>%
mutate(word = str_replace_all(word, " ", "%"))
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare & word != "") %>%
mutate(word = str_replace_all(word, " ", "%"))
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = ifelse(word == "word (earthworm)", str_replace(word, "word, earthworm"), word),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_replace(word, "word (earthworm)", "word, earthworm"),
word = str_to_lower(word)) %>%
as_tibble
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_replace_all(word, "word (earthworm)", "word, earthworm"),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_replace_all(word, "[\\(\\)]+", "word, earthworm"),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_replace_all(word, "worm (earthworm)", "worm, earthworm"),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
language_words_api_clean <- language_words_api %>%
filter(!is.na(id)) %>%
left_join(language_info_api %>%
select(id_lang, language, silcode),
by = c("id_lang", "language")) %>%
select(language, silcode, id_lang, id:pmpcognacy) %>%
separate(col = cognacy, into = c("cognacy1", "cognacy2"), sep="\\,") %>%
mutate(cognacy1 = as.numeric(cognacy1),
cognacy2 = as.numeric(cognacy2)) %>%
arrange(language) %>%
left_join(language_info_api_clean %>%
select(language, silcode)) %>%
# Replace non-alphanumeric characters with url friendly letters
mutate(word = str_replace_all(word, "\\/", ", "),
word = str_replace_all(word, "\\?", ""),
word = str_replace_all(word, "worm \\(earthworm\\)", "worm, earthworm"),
word = str_to_lower(word)) %>%
as_tibble
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
word_list
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
# Chop words data into multiple pieces for easy accessing for the API
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare & word != "") %>%
mutate(word = str_replace_all(word, " ", "%"))
filename <- paste0(word_compare)
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_words_api_clean
word_compare
str_replace_all(word_compare, " ", "%")
word_list <- language_words_api_clean$word %>% unique %>% c()
for(id in 1:length(word_list)){
word_compare <- word_list[id]
result <- language_words_api_clean %>% filter(word == word_compare & word != "")
filename <- str_replace_all(word_compare, " ", "%")
# Export into separate json files
maindir <- "data/output_json/language_words/"
filedir <- paste0(maindir, filename)
write_json(result, paste0(filedir, ".json"))
}
language_info_api_clean
